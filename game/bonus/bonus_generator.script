local BONUS_LIST = { "lucky", "heart", "score" }

function does_object_exist(id)
	return pcall(function(id)
		go.get_position(id)
	end, id) == true
end

function remove_game_object(self, url, _)
	go.delete(url)
end

function create_bonus(self, name, speed)
	local bonus_id = factory.create("#" .. name .. "_factory")
	local bonus_url = msg.url(nil, bonus_id, "bonus")
	local bonus_width = go.get(bonus_url, "size.x") * go.get(bonus_url, "scale.x")

	table.insert(self.components_ids, bonus_id)
	go.animate(
		bonus_id,
		"position.x",
		go.PLAYBACK_ONCE_FORWARD,
		-bonus_width,
		go.EASING_LINEAR,
		100 / speed,
		0.5,
		remove_game_object
	)
	go.animate(bonus_id, "position.y", go.PLAYBACK_LOOP_PINGPONG, 300, go.EASING_INOUTSINE, 1)
end

function generate_bonus(self, _, _)
	local random_do_something = math.random(1, 3)
	if random_do_something == 2 then
		local random_speed = math.random(30, 80)
		local random_index = math.random(1, #BONUS_LIST)
		create_bonus(self, BONUS_LIST[random_index], random_speed)
	end
end

function init(self)
	math.randomseed(os.time())
	self.components_ids = {}
	self.timer = timer.delay(3, true, generate_bonus)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("get_bonus_list") then
        msg.post(sender, "send_bonus_list", BONUS_LIST)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
